services:
  db:
    image: postgres:17
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  kafka:
    image: apache/kafka:3.8.0
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:

      KAFKA_NODE_ID: 1
      # Что: Уникальный идентификатор узла в кластере.
      # Docker: Контейнер запускает Kafka с этим ID, чтобы отличать брокеры.
      # Под капотом: При старте JVM Kafka читает переменную окружения и устанавливает node.id=1 для KRaft (алгоритм Raft consensus).
      # В режиме quorum=1 это voter ID, хранится в __cluster_metadata (журнал конфигурации).
      # Итог: Брокер имеет ID=1 и готов участвовать в кворуме.

      KAFKA_PROCESS_ROLES: broker,controller
      # Что: Роли процесса Kafka. Здесь один процесс = и broker, и controller.
      # Docker: Контейнер запускает одну JVM, которая выполняет обе роли (экономия ресурсов).
      # Под капотом: Kafka запускает два модуля — BrokerServer (данные и репликация) и QuorumController (управление через Raft).
      # Итог: Один процесс выполняет обе роли, подходит для локальной разработки.

      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:${KAFKA_CONTROLLER_PORT}
      # Что: Список слушателей (адреса и порты, на которых Kafka принимает соединения).
      # Docker: Контейнер биндит внутренние TCP-порты. 0.0.0.0 = все интерфейсы.
      # Под капотом: Kafka создаёт TCP-сокеты. PLAINTEXT — соединение без шифрования; CONTROLLER — порт для Raft.
      # Итог: Kafka слушает клиентов на 9092 и контроллер на отдельном порту.

      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:${KAFKA_PORT}
      # Что: Адрес, который Kafka сообщает клиентам.
      # Docker: Клиенты снаружи (Spring-приложение) видят именно этот адрес.
      # Под капотом: При запросе метаданных брокер отдаёт host:port из advertised, а не внутренний 0.0.0.0.
      # Итог: Клиенты могут подключиться через localhost:${KAFKA_PORT} без ошибок.

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      # Что: Карта протоколов для слушателей.
      # Docker: Определяет, что все соединения идут в открытом виде (без шифрования и авторизации).
      # Под капотом: Kafka парсит карту и применяет настройки к каждому listener.
      # Итог: Быстрое, но небезопасное соединение. Подходит только для разработки.

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Что: Имя слушателя для связи между брокерами.
      # Docker: Используется для репликации между узлами.
      # Под капотом: Followers читают данные от leader через этот listener.
      # Итог: В одноброкерной конфигурации не используется, но готово для масштабирования.

      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # Что: Имя слушателя для контроллера.
      # Docker: Определяет порт, через который controller взаимодействует.
      # Под капотом: Raft-взаимодействие между контроллерами (append, vote, heartbeat).
      # Итог: Контроллер активен и управляет метаданными.

      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:${KAFKA_CONTROLLER_PORT}
      # Что: Список голосующих в кворуме (quorum voters).
      # Docker: Здесь всего один участник — ID=1 на localhost.
      # Под капотом: Raft использует этот список для выборов и синхронизации.
      # Итог: Кворум=1, кластер самоуправляемый, но без отказоустойчивости.

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Что: Количество копий внутреннего топика __consumer_offsets.
      # Docker: Создаётся с replication=1, то есть одна копия.
      # Под капотом: Данные о смещениях хранятся как key-value с compacted cleanup.
      # Итог: Минимальная надёжность, достаточно для разработки.

      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Что: Количество копий топика __transaction_state.
      # Docker: Только одна копия.
      # Под капотом: Хранит метаданные транзакций (producer.id, epochs).
      # Итог: Транзакции возможны, но без устойчивости к сбоям.

      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # Что: Минимальное количество синхронных реплик для транзакционного лога.
      # Docker: Достаточно одной синхронной реплики.
      # Под капотом: Запись считается успешной, если хотя бы лидер её зафиксировал.
      # Итог: Минимальная надёжность, подходит только для одноброкерной установки.

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      # Что: Автоматическое создание топиков при первом обращении.
      # Docker: Удобно для тестов, не требует ручного создания.
      # Под капотом: При ProduceRequest к несуществующему топику брокер сам создаёт его с 1 партицией и replication=1.
      # Итог: Экономит время при разработке.

      KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      # Что: Уникальный ID кластера (UUID).
      # Docker: Передаётся через переменную окружения.
      # Под капотом: При первом запуске создаётся в meta.properties и проверяется при старте.
      # Итог: Кластер идентифицирован, хранение данных согласовано.
    volumes:
      - kafka-data:/var/lib/kafka-data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka

volumes:
  postgres-data:
  kafka-data:
